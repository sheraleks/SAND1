reticulate::repl_python()
import numpy as np
y
import numpy as np
import scipy as sp
pip install scipy
# Проведем кодирование качественных данных на основе replace_map
quit
reticulate::source_python('C:/SAND/SAND_LR1/1. Data coding.py')
reticulate::repl_python()
# Загрузка данных
import pandas as pd
# Загрузка данных
df = pd.read_csv('V2.csv', encoding='utf-8', delimiter=';')
del df[df.columns[0]]
# Составим словарь для кодирования на основе данных из документа "german.doc"
replace_map = {
"Status" :
{
"<0 DM": 1,
"0-200 DM": 2,
">=200 DM": 3,
"no checking account": 4
},
"Credit.history":
{
"no credits taken/all credits paid back duly": 1,
"all credits at this bank paid back duly": 2,
"existing credits paid back duly till now": 3,
"delay in paying off in the past": 4,
"critical account/other credits existing (not at this bank)": 5
},
"Purpose":
{
"car (new)": 1,
"car (used)": 2,
"furniture/equipment": 3,
"radio/television": 4,
"domestic appliances": 5,
"repairs": 6,
"education": 7,
"(vacation - does not exist?)": 8,
"retraining": 9,
"business": 10
},
"Savings.account":
{
"<100 DM": 1,
"100-500 DM": 2,
"500-1000 DM": 3,
">=1000 DM": 4,
"unknown/ no savings account": 5
},
"Personal.status.and.sex":
{
"male: divorced/separated": 1,
"female: divorced/separated/married": 2,
"male: single": 3,
"male: married/widowed": 4
},
"Job":
{
"unemployed/ unskilled  - non-resident": 1,
"unskilled - resident": 2,
"skilled employee / official": 3,
"management/ self-employed/highly qualified employee/ officer": 4
},
"foreign.worker":
{
"yes": 1,
"no": 2
}
}
# Проведем кодирование качественных данных на основе replace_map
df_coded = df.copy()
df_coded.replace(replace_map, inplace=True)
df_coded.to_excel("df_coded.xlsx")
df = pd.read_csv('V2.csv', encoding='utf-8', delimiter=';')
del df[df.columns[0]]
print(df)
replace_map = {
"Status" :
{
"<0 DM": 1,
"0-200 DM": 2,
">=200 DM": 3,
"no checking account": 4
},
"Credit.history":
{
"no credits taken/all credits paid back duly": 1,
"all credits at this bank paid back duly": 2,
"existing credits paid back duly till now": 3,
"delay in paying off in the past": 4,
"critical account/other credits existing (not at this bank)": 5
},
"Purpose":
{
"car (new)": 1,
"car (used)": 2,
"furniture/equipment": 3,
"radio/television": 4,
"domestic appliances": 5,
"repairs": 6,
"education": 7,
"(vacation - does not exist?)": 8,
"retraining": 9,
"business": 10
},
"Savings.account":
{
"<100 DM": 1,
"100-500 DM": 2,
"500-1000 DM": 3,
">=1000 DM": 4,
"unknown/ no savings account": 5
},
"Personal.status.and.sex":
{
"male: divorced/separated": 1,
"female: divorced/separated/married": 2,
"male: single": 3,
"male: married/widowed": 4
},
"Job":
{
"unemployed/ unskilled  - non-resident": 1,
"unskilled - resident": 2,
"skilled employee / official": 3,
"management/ self-employed/highly qualified employee/ officer": 4
},
"foreign.worker":
{
"yes": 1,
"no": 2
}
}
df_coded = df.copy()
df_coded.replace(replace_map, inplace=True)
df_coded.to_excel("df_coded.xlsx")
df_coded.to_excel("df_coded.xlsx")
df_coded.to_excel("df_coded.xlsx", index=false)
df_coded.to_excel("df_coded.xlsx", index=False)
library(readxl)
quit
krusk = as.data.frame(krusk, row.names = names(category))
library(readxl)
read_excel("df_coded.xlsx")
data = read_excel("df_coded.xlsx")
# Библиотека для функции взаимной информации
library(DescTools)
# Библиотека для загрузки файлов Excel
library(readxl)
data = read_excel("df_coded.xlsx")
# Библиотека для функции взаимной информации
library(DescTools)
vector <- c()
for (row in names(data))
{
for (col in names(data))
{
a = as.vector(data[[row]])
b = as.vector(data[[col]])
coeff = MutInf(a, b, base=2)
vector <- c(vector, coeff)
}
}
MI = matrix(vector,nrow=ncol(data),ncol=ncol(data))
colnames(MI) = names(data)
MI = as.data.frame(MI, row.names = names(data))
View(MI)
reticulate::repl_python()
import pandas as pd
# Загрузка данных
df = pd.read_csv('V2.csv', encoding='utf-8', delimiter=';')
del df[df.columns[0]]
# Составим словарь для кодирования на основе данных из документа "german.doc"
replace_map = {
"Status" :
{
"<0 DM": 1,
"0-200 DM": 2,
">=200 DM": 3,
"no checking account": 4
},
"Credit.history":
{
"no credits taken/all credits paid back duly": 1,
"all credits at this bank paid back duly": 2,
"existing credits paid back duly till now": 3,
"delay in paying off in the past": 4,
"critical account/other credits existing (not at this bank)": 5
},
"Purpose":
{
"car (new)": 1,
"car (used)": 2,
"furniture/equipment": 3,
"radio/television": 4,
"domestic appliances": 5,
"repairs": 6,
"education": 7,
"(vacation - does not exist?)": 8,
"retraining": 9,
"business": 10
},
"Savings.account":
{
"<100 DM": 1,
"100-500 DM": 2,
"500-1000 DM": 3,
">=1000 DM": 4,
"unknown/ no savings account": 5
},
"Personal.status.and.sex":
{
"male: divorced/separated": 1,
"female: divorced/separated/married": 2,
"male: single": 3,
"male: married/widowed": 4
},
"Job":
{
"unemployed/ unskilled  - non-resident": 1,
"unskilled - resident": 2,
"skilled employee / official": 3,
"management/ self-employed/highly qualified employee/ officer": 4
},
"foreign.worker":
{
"yes": 1,
"no": 2
}
}
# Проведем кодирование качественных данных на основе replace_map
df_coded = df.copy()
df_coded.replace(replace_map, inplace=True)
df_coded.to_excel("1. Coded data.xlsx", index=False)
quit
# Библиотека для загрузки файлов Excel
library(readxl)
data = read_excel("1. Coded data")
# Библиотека для функции взаимной информации
library(DescTools)
vector <- c()
for (row in names(data))
{
for (col in names(data))
{
a = as.vector(data[[row]])
b = as.vector(data[[col]])
coeff = MutInf(a, b, base=2)
vector <- c(vector, coeff)
}
}
MI = matrix(vector,nrow=ncol(data),ncol=ncol(data))
colnames(MI) = names(data)
MI = as.data.frame(MI, row.names = names(data))
# Библиотека для загрузки файлов Excel
library(readxl)
data = read_excel("1. Coded data.xlsx")
# Библиотека для функции взаимной информации
library(DescTools)
vector <- c()
for (row in names(data))
{
for (col in names(data))
{
a = as.vector(data[[row]])
b = as.vector(data[[col]])
coeff = MutInf(a, b, base=2)
vector <- c(vector, coeff)
}
}
MI = matrix(vector,nrow=ncol(data),ncol=ncol(data))
colnames(MI) = names(data)
MI = as.data.frame(MI, row.names = names(data))
# Библиотека для загрузки файлов Excel
library(writexl)
write_excel("2. Mutual Information.xlsx")
# Библиотека для загрузки файлов Excel
library(readxl)
write_xlsx("2. Mutual Information.xlsx")
write_xlsx(MI, "2. Mutual Information.xlsx")
View(MI)
# Библиотека для загрузки файлов Excel
library(xlsx)
# Библиотека для загрузки файлов Excel
library(openxlsx)
install.packages("openxlsx")
# Библиотека для загрузки файлов Excel
library(openxlsx)
write.xlsx(MI, "2. Mutual Information.xlsx", colNames=TRUE, rowNames=TRUE)
# Выполним проверку гипотезы о значимости показателя взаимной информации
# Устанавливается отдельно из репозитория bioconductor
library('maigesPack')
vector <- c()
for (row in names(data))
{
for (col in names(data))
{
a = as.vector(data[[row]])
b = as.vector(data[[col]])
coeff = bootstrapMI(a, b, 1000)
vector <- c(vector, coeff)
}
}
mi_p = matrix(vector,nrow=ncol(data),ncol=ncol(data))
colnames(mi_p) = names(data)
mi_p = as.data.frame(mi_p, row.names = names(data))
mi_p
print("A" + "B", 7)
print("A" + "B", str(7)
)
print("A" + "B" + str(7))
print(7)
vector <- c()
for (row in names(data))
{
for (col in names(data))
{
a = as.vector(data[[row]])
b = as.vector(data[[col]])
coeff = bootstrapMI(a, b, 1000)
sign = "-"
if (coeff <= 0.05) sign = "+"
vector <- c(vector, sign)
print(row)
print(col)
print(sign)
}
}
mi_p = matrix(vector,nrow=ncol(data),ncol=ncol(data))
colnames(mi_p) = names(data)
mi_p = as.data.frame(mi_p, row.names = names(data))
write.xlsx(MI, "2. Hypothesis testing.xlsx", colNames=TRUE, rowNames=TRUE)
View(data)
write.xlsx(mi_p, "2. Hypothesis testing.xlsx", colNames=TRUE, rowNames=TRUE)
